{"version":3,"sources":["MarkedMessage.js","https_fetch.js","ChainedMessageMap.js","RandomMessageMap.js","MessageMap.js","SynonymMap.js","OutTriggerActions.js","LoopProcessor.js","DialogState.js","LocationSelector.js","NPCSelector.js","AgentInfo.js","PlayerEditor.js","DialogOptions.js","AudioFlags.js","MainContent.js","LocationInfo.js","LoopInfo.js","GameState.js","BusinessMurder.js","App.js","index.js"],"names":["MarkedMessage","message","startIndex","sMark","this","lenMark","length","logIt","start","indexOf","hasMark","end","key","hasKey","bind","replaceMark","safeMessage","keyStart","eindex","substring","val","replace","sVal","String","msg","APP_ROOT","https_fetch","getApplicationJson","url","a","fetch","method","mode","referrerPolicy","headers","response","json","body","status","Error","postApplicationJson","strJson","JSON","stringify","lenJson","jsbody","ChainedMessageMap","getChainedMessage","gameState","newlines","getChainedMessageKeys","RandomMessageMap","getRandomMessage","getRandomMessageKeys","MessageMap","getMessage","getMessageKeys","SynonymMap","getSynonym","getSynonyms","getSynonymKeys","OutTriggerActions","props","trigger","actions","cS","mS","rS","sS","lstS","LoopProcessor","getMessaging","markup","proc","npcs","location","console","log","then","res","synonym","getNPCs","zone","forEach","n","display","slice","doEnvironment","env","chained","random","synonyms","doInput","ins","list","doOutput","outs","arr","split","outArr","i","trig","acts","cin","mArr","cend","push","loadWatcher","endGameState","row","e","envLoading","envDoneLoading","envtext","lastrow","lastRow","insLoading","insDoneLoading","instext","concat","o","outLoading","outDoneLoading","outOptions","clearInterval","loadTimer","caller","name","outHandler","logic","processLoop","checksPass","checkPropertyValues","setPropertyValues","doActions","getPropertyRange","setHandlers","range","min","Number","max","dif","Math","floor","obj","k","v","t","isNaN","player","loop","checks","npc","w","world","z","c","setInterval","DialogState","className","nxtrigger","delay","type","value","onClick","evt","resetHandler","Component","LocationSelector","composeOptions","zoneId","zs","id","getZone","adjacents","zid","index","array","map","item","zoneOptions","size","onChange","locHandler","NPCSelector","ns2","npcOptions","npcHandler","options","Map","AgentInfo","loadGame","Object","entries","catch","err","uid","Date","now","firstName","lastName","age","gender","race","skin","eyes","hair","cloth","height","weight","cleanliness","beauty","strength","handler","agentHandler","isLoaded","has","toLowerCase","get","raceOptions","genderOptions","skinOptions","eyeOptions","hairOptions","clothOptions","heightOptions","weightOptions","cleanOptions","beautyOptions","strengthOptions","PlayerEditor","mapItems","Array","from","text","getOptionsFor","colSpan","htmlFor","placeholder","step","autoComplete","DialogOptions","arrList","nofollow","linkOptions","AudioFlags","narrate","environ","atmos","checked","audioFlags","audioHandler","for","autoPlay","MainContent","zoneName","rows","cols","maxLength","readOnly","rowSpan","LocationInfo","loaded","worldInfo","zoneInfo","getStartLocation","getZones","setNPCs","toString","match","zones","LoopInfo","GameState","getStartLoop","getTestPlayer","envHandler","insHandler","BusinessMurder","getLogic","getName","App","loading","locations","looper","state","handleLocationChange","handleNPCChange","handleProfileChange","handleLoopState","finishLoop","handleOutputs","componentSaveState","componentClearState","handleResetGame","componentStartGame","handleAudio","loadWait","setState","loopProc","loopTimer","localStorage","removeItem","setItem","newGameState","newAudioFlags","target","forceUpdate","option","newState","evtValue","newLocation","newPlayer","window","addEventListener","getItem","newZones","newWorld","newZone","parse","removeEventListener","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cfe72579.chunk.js","sourcesContent":["// marker = new MarkedMessage(message, startIndex, sMark);\r\n// if/while( marker.hasMark ) { \r\n//    val = getValueFromSomewhere( marker.key ); \r\n//    marker.replaceMark( val );  // new message, indices, key=null\r\n// }\r\n\r\nconst eB  = \"}\";   // end brace\r\n\r\nclass MarkedMessage {\r\n    constructor(message, startIndex, sMark){\r\n        this.message = message ?? \"\";\r\n        this.sMark = sMark;\r\n        this.lenMark = sMark.length;\r\n        MarkedMessage.logIt(\"constructor init...\");\r\n        this.start = this.message.indexOf(sMark, startIndex);\r\n        this.hasMark = (this.start > -1);\r\n        this.end = -1;\r\n        this.key = null;\r\n\r\n        this.hasKey = this.hasKey.bind(this);\r\n        this.replaceMark = this.replaceMark.bind(this);\r\n    }\r\n\r\n    static logIt(msg){ /* console.log(\"MarkedMessage: \"+ msg); */ }\r\n\r\n    hasKey(){\r\n        this.key = null;\r\n        this.safeMessage = this.message.length - this.lenMark;\r\n        MarkedMessage.logIt(\"------ NEW HASKEY ------ start: \"+ this.start +\", \"+ this.message);\r\n        if((this.start > -1) && (this.start < this.safeMessage)){\r\n            this.start = this.message.indexOf(this.sMark, this.start);  // find the next startIndex\r\n            this.hasMark = this.start > -1;\r\n            this.keyStart = this.hasMark ? this.start + this.lenMark : -1;\r\n            if(this.keyStart > this.start){\r\n                let eindex = this.message.indexOf(eB, this.keyStart); // find the endBrace\r\n                MarkedMessage.logIt(\"start: \"+ this.start +\", keyStart: \"+ this.keyStart +\", endBrace: \"+ eindex);\r\n                if(eindex > this.keyStart){\r\n                    this.end = eindex;\r\n                    this.key = this.message.substring(this.keyStart, this.end); // get the key inside\r\n                    MarkedMessage.logIt(\"Extracted: \"+ this.key);\r\n                    if(this.end < this.safeMessage){\r\n                        this.hasMark = (this.message.indexOf(this.sMark, this.end +1) > -1);\r\n                    }else{\r\n                        this.hasMark = false;\r\n                    }\r\n                    MarkedMessage.logIt(\"post hasMark ? \"+ this.hasMark );\r\n                }else{\r\n                    MarkedMessage.logIt(\"endBrace is not greater then keyStart!\");\r\n                }\r\n            }else{\r\n                MarkedMessage.logIt(\"keyStart is not greater then start!\");\r\n            }\r\n        }else{  /* TODO: what do we reset/clear on no possible key? */ \r\n            MarkedMessage.logIt(\"hasKey NOT processed...\");\r\n        }\r\n        return (this.key !== null);\r\n    }\r\n\r\n    /**\r\n     * Insert whatever val back into the message to replace the key that was extracted.\r\n     * This must be done in order to set all required pointers to the correct state or \r\n     * position to continue to cycle the remaining message for any more markers.\r\n     * @param val \r\n     */\r\n    replaceMark( val ){\r\n        let replace;\r\n        let sVal;\r\n        if(this.key !== null)\r\n        {\r\n            if (val !== null)\r\n            {\r\n                sVal = String(val);\r\n                if (this.start > 0){                      \r\n                    MarkedMessage.logIt(\"get frontEnd chars only: 0 > \"+ this.start);             \r\n                    replace = this.message.substring(0, this.start) + sVal; // get frontend + val\r\n                    this.start = this.start + sVal.length;\r\n                    MarkedMessage.logIt(\"frontEnd + val start: \"+ this.start +\", \"+ replace);             \r\n                }else{                                                 \r\n                    MarkedMessage.logIt(\"got NO frontEnd, just: \"+ sVal);             \r\n                    replace = sVal;                                     // or just val\r\n                    this.start = sVal.length;\r\n                }\r\n\r\n                MarkedMessage.logIt(\"new start: \"+ this.start +\", \"+ replace);     \r\n\r\n                if(this.end < (this.message.length -1)){               // concat end?\r\n                    replace = replace + this.message.substring(this.end + 1);\r\n                    MarkedMessage.logIt(\"adding the End, start: \"+ this.start +\", \"+ replace); \r\n                }\r\n                this.message = replace;\r\n                MarkedMessage.logIt(\"new message: \"+ this.message);             \r\n                // does not clear hasMark in prep for another loop, if needed\r\n            }\r\n            else{ // val came in null !\r\n                this.start = this.end +1;\r\n                MarkedMessage.logIt(\"replaceMark received NULL val! new start: \"+ this.start);                \r\n            }\r\n            this.keyStart = -1;\r\n            this.end = -1;\r\n            this.key = null;\r\n        }else{\r\n            MarkedMessage.logIt(\"replaceMark received NULL key!\");                            \r\n        }        \r\n        return this.message;\r\n    }\r\n\r\n    prepNextMark(){\r\n\r\n    }\r\n}\r\nexport default MarkedMessage;\r\n","\r\nconst APP_ROOT = \"engine\";\r\n\r\nclass https_fetch {\r\n\r\n    /**\r\n     * Async GET call to the server for a complete application/json response body.\r\n     * @param string urlPath -- the relative urlPath to perform async ajax request. Do NOT include the app root. \\\r\n     * Examples: \"/synonyms\", \"/synonym/{key}\", etc..\r\n     * @return Promise<Body.json()> Returns the response.json() Promise from the fetch.\r\n     * @throws Error if the server provides a status other than 200.\r\n     */\r\n     static getApplicationJson = async( url ) => {\r\n        const response = await fetch(APP_ROOT + url, {\r\n            method: 'GET',\r\n            mode: 'cors',\r\n            referrerPolicy: 'no-referrer',\r\n            headers:{\r\n                'Accept': 'application/json',\r\n                'Access-Control-Allow-Origin': '*'\r\n            }\r\n        });\r\n        const body = await response.json();\r\n        if(response.status !== 200){\r\n            throw new Error(\"HttpError: \"+ response.status +\":\"+ body.message);\r\n        }\r\n        return body; //still a Promise requiring .then and .catch handling\r\n    }\r\n\r\n    /**\r\n     * Async POST to the server with gameState json data expecting a complete application/json response body.\r\n     * @param string urlPath -- the relative urlPath to perform async ajax request. Do NOT include the app root. \\\r\n     * Examples: \"/synonyms\", \"/synonym/{key}\", etc..\r\n     * @param json body -- usually the complete gameState json.  But whatever is appropriate for the url.\r\n     * @return Promise<Body.json()> Returns the response.json() Promise from the fetch.\r\n     * @throws Error if the server provides a status other than 200.\r\n     */\r\n     static postApplicationJson = async( url, json ) => {\r\n        const strJson = JSON.stringify(json);\r\n        const lenJson = strJson.length;\r\n        const response = await fetch(APP_ROOT + url, {\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            referrerPolicy: 'no-referrer',\r\n            headers:{\r\n                'Content-Type': 'application/json',\r\n                'Content-Length': lenJson,\r\n                'Accept': 'application/json',\r\n                'Access-Control-Allow-Origin': '*'\r\n            },\r\n            body: strJson\r\n        });\r\n        const jsbody = await response.json();\r\n        if(response.status !== 200){\r\n            throw new Error(\"HttpError: \"+ response.status +\":\"+ jsbody.message);\r\n        }\r\n        return jsbody; //still a Promise requiring .then and .catch handling\r\n    }\r\n}\r\nexport default https_fetch;","// ChainedMessageMap.js\r\n// ./client/ChainedMessageMap.js -- part of the React client\r\nimport https_fetch from \"./https_fetch\";\r\n\r\nclass ChainedMessageMap{\r\n\r\n    // this is who we call externally\r\n    // linefeeds = true | false\r\n    /**\r\n     * \r\n     * @param string - msgKey\r\n     * @param gameState - gameState\r\n     * @param boolean - optional true/false to separate chained messages with newlines\r\n     */\r\n    static getChainedMessage = async(key, gameState, newlines) => {\r\n        if(key == null || key.length === 0) throw new Error(\"Invalid ChainedMessage Key\");\r\n        if(gameState == null || !((typeof gameState) === 'object' )) throw new Error(\"Invalid GameState\");\r\n        if( newlines && (newlines === true)){\r\n            return await https_fetch.postApplicationJson(`/chainedMessage/${key}?newlines`, gameState);\r\n        }else{\r\n            return await https_fetch.postApplicationJson(`/chainedMessage/${key}`, gameState);\r\n        }\r\n    }\r\n\r\n    static getChainedMessageKeys = async() => {\r\n        return await https_fetch.getApplicationJson(\"/chainedMessages\");\r\n    }\r\n}\r\nexport default ChainedMessageMap;\r\n","// RandomMessageMap.js\r\n// ./client/RandomMessageMap.js -- part of the React client\r\nimport https_fetch from \"./https_fetch\";\r\n\r\nclass RandomMessageMap{\r\n\r\n    // this is who we call externally\r\n    static getRandomMessage = async(key, gameState) => {\r\n      if(key == null || key.length === 0) throw new Error(\"Invalid RandomMessage Key\");\r\n      if(gameState == null || !((typeof gameState) === 'object' )) throw new Error(\"Invalid GameState\");\r\n      return await https_fetch.postApplicationJson(`/randomMessage/${key}`, gameState);\r\n  }\r\n\r\n    static getRandomMessageKeys = async() => {\r\n      return await https_fetch.getApplicationJson(\"/randomMessages\");\r\n   }\r\n}\r\nexport default RandomMessageMap;\r\n","\r\n// MessageMap.js\r\n// ./client/MessageMap.js -- part of the React client\r\nimport https_fetch from \"./https_fetch\";\r\n\r\nclass MessageMap{\r\n\r\n    // this is who we call externally\r\n    static getMessage = async(key, gameState) => {\r\n        if(key == null || key.length === 0) throw new Error(\"Invalid Message Key\");\r\n        if(gameState == null || !((typeof gameState) === 'object' )) throw new Error(\"Invalid GameState\");\r\n        return await https_fetch.postApplicationJson(`/message/${key}`, gameState);\r\n    }\r\n\r\n    static getMessageKeys = async() =>{\r\n       return await https_fetch.getApplicationJson(\"/messages\");\r\n    }\r\n}\r\nexport default MessageMap;\r\n","// SynonymMap.js\r\n// ./client/SynonymMap.js -- part of the React client\r\nimport https_fetch from \"./https_fetch\";\r\n\r\nclass SynonymMap{\r\n\r\n    /**\r\n     * @param string key -- the {key} for /synonym/{key}.\r\n     * @return Promise<Body.json()> Returns the response.json() Promise from /synonym/{key}.\r\n     * @throws Error if the key param is null or empty, or if the server provides a status other than 200. \r\n     */\r\n    static getSynonym = async(key) => {\r\n        if(key == null || key.length === 0) throw new Error(\"Invalid Synonyms Key\");\r\n        return await https_fetch.getApplicationJson(`/synonym/${key}`);\r\n    }\r\n\r\n    /**\r\n     * @param string key -- the {key} for /synonym/{key}.\r\n     * @return Promise<Body.json()> Returns the response.json() Promise from /synonym/{key}.\r\n     * @throws Error if the key param is null or empty, or if the server provides a status other than 200. \r\n     */\r\n     static getSynonyms = async(key) => {\r\n        if(key == null || key.length === 0) throw new Error(\"Invalid Synonyms Key\");\r\n        return await https_fetch.getApplicationJson(`/synonyms/${key}`);\r\n    }\r\n\r\n    /**\r\n     * @return Promise<Body.json()>\r\n     * @throws error\r\n     */\r\n    static getSynonymKeys = async() => {\r\n       return await https_fetch.getApplicationJson(\"/synonyms\");\r\n    }\r\n}\r\nexport default SynonymMap;","\r\nclass OutTriggerActions {\r\n    constructor(props){\r\n        this.message = props.message ?? \"\";\r\n        this.trigger = props.trigger ?? \"\";\r\n        this.actions = props.actions ?? \"\";\r\n    }\r\n}\r\nexport default OutTriggerActions;","/* eslint-disable no-loop-func */\r\n//import AgentInfo         from \"./AgentInfo\";\r\n//import LocationInfo      from \"./LocationInfo\";\r\n//import LoopInfo          from \"./LoopInfo\";\r\n//import GameState         from \"./GameState\";\r\nimport MarkedMessage     from \"./MarkedMessage\";\r\nimport ChainedMessageMap from \"./ChainedMessageMap\";\r\nimport RandomMessageMap  from \"./RandomMessageMap\";\r\nimport MessageMap        from \"./MessageMap\";\r\nimport SynonymMap        from \"./SynonymMap\";\r\nimport OutTriggerActions from \"./OutTriggerActions\";\r\n\r\nconst cS = \"$c{\"; // chained message key\r\n// eslint-disable-next-line no-unused-vars\r\nconst iS = \"$i{\"; // item stat (item:property:value ???)\r\nconst lS = \"$l{\"; // location stat (property:value)\r\nconst mS = \"$m{\"; // message key\r\n// eslint-disable-next-line no-unused-vars\r\nconst nS = \"$n{\"; // targeted npc stat (property:value)\r\nconst pS = \"$p{\"; // player stat (property:value)\r\nconst rS = \"$r{\"; // random message key\r\nconst sS = \"$s{\"; // synonyms key\r\nconst xS = \"$x{\"; // loop stat (property:value)\r\nconst lstS = \"$lst{\"; // list \"npc\"s or \"item\"s present at location\r\n\r\nclass LoopProcessor {\r\n\r\n    /**\r\n     * @param {*} props to initialize the constructor.  \r\n     * name       : String name of app/game.  \r\n     * envHandler : callback function to handle changes to environment dialog.  \r\n     * insHandler : callback function to handle changes to input/player dialog.  \r\n     * outHandler : callback function to handle changes to output/npc dialog.  \r\n     */\r\n    constructor(props){\r\n        this.name                = props.name       ?? \"Test Game\";\r\n        this.outHandler          = props.outHandler; \r\n        this.lastRow             = props.lastRow    ?? -1;\r\n        this.logic               = props.logic      ?? [];\r\n\r\n        this.processLoop         = this.processLoop.bind(this);\r\n        this.checksPass          = this.checksPass.bind(this);\r\n        this.checkPropertyValues = this.checkPropertyValues.bind(this);\r\n        this.setPropertyValues   = this.setPropertyValues.bind(this);\r\n        this.getMessaging        = this.getMessaging.bind(this);\r\n        this.doActions           = this.doActions.bind(this);\r\n        this.doEnvironment       = this.doEnvironment.bind(this);\r\n        this.doInput             = this.doInput.bind(this);\r\n        this.doOutput            = this.doOutput.bind(this);\r\n        this.getPropertyRange    = this.getPropertyRange.bind(this);\r\n\r\n        this.setHandlers         = this.setHandlers.bind(this);\r\n        this.loadWatcher         = this.loadWatcher.bind(this);\r\n\r\n        this.loadTimer = \"\";\r\n        this.envLoading = false;\r\n        this.insLoading = false;\r\n        this.outLoading = false;\r\n        this.envDoneLoading = false;\r\n        this.insDoneLoading = false;\r\n        this.outDoneLoading = false;\r\n        this.endGameState = null;\r\n        this.caller = null;\r\n    }\r\n\r\n    static logIt(msg){ console.log(\"LoopProcessor: \"+ msg);  }\r\n\r\n    setHandlers(props){\r\n        this.outHandler = props.outHandler; // javascript:void()\r\n    }\r\n\r\n    /**\r\n     * Called internally by setPropertyValues().  \r\n     * Calc and return a random number between n-n.\r\n     * @param {String} range String \"n-n\".  \r\n     * @return {Number} random Number between n-n (inclusive).  \r\n     */\r\n    getPropertyRange(range){\r\n        //LoopProcessor.logIt(\"getPropertyRange called for range: \"+ range);\r\n        let arr = range.split(\"-\");\r\n        let min = Number(arr[0]);\r\n        let max = Number(arr[1]);\r\n        let dif = Number(max - min + 1);\r\n        return Math.floor(Math.random() * dif) + min;\r\n    }\r\n\r\n    /**\r\n     * Called internally by doActions().  \r\n     * Given a String of \"$?{prop:value}$?{prop:value}\" settings, \r\n     * set all property values associated with the obj and sMark given.  \r\n     * Supports (prop:value) (delay:n-n) (prop:++) (prop:--)\r\n     * @param {String} acts String of $p{}$n{}$l{}$x{}$i{} prop:value settings.  \r\n     * @param {*} obj  the p, n, l, x, i obj to receive the props.  \r\n     * @param {String} sMark the prefix pS, nS, lS, xS, iS to identify the props to set.  \r\n     * @return {*} the (possibly) modified obj receiving changes.  \r\n     */\r\n    setPropertyValues(acts, obj, sMark){\r\n        //LoopProcessor.logIt(\"setPropertyValues called with \"+ sMark +\": \"+ acts);\r\n        let proc = new MarkedMessage(acts, 0, sMark);\r\n        let a, arr, k, v, t;\r\n        while( proc.hasMark && proc.hasKey() ){\r\n            a =  proc.key;\r\n            arr = a.split(':');\r\n            k = arr[0]; v=arr[1];\r\n            //LoopProcessor.logIt(\"setPropertyValue \"+ k +\"=\"+ v);\r\n            if( (k === \"delay\") && (v.indexOf(\"-\") > 0 )){\r\n                obj[k] = this.getPropertyRange(v);\r\n            }else if(v.indexOf(\"++\") === 0){\r\n                t = obj[k];\r\n                if(t==null){\r\n                    t=0;\r\n                }else{\r\n                    t = Number(t);\r\n                    if(isNaN(t)) t = 0;\r\n                }\r\n                t++;\r\n                obj[k] = t;\r\n                //LoopProcessor.logIt(\"setPropertyValue \"+ k +\" incremented to \"+ t);\r\n            }else if(v.indexOf(\"--\") === 0){\r\n                t = obj[k];\r\n                if(t==null){\r\n                    t=0;\r\n                }else{\r\n                    t = Number(t);\r\n                    if(isNaN(t)) t = 0;\r\n                }\r\n                t--;\r\n                obj[k] = t;\r\n                //LoopProcessor.logIt(\"setPropertyValue \"+ k +\" decremented to \"+ t);\r\n            }else{\r\n                obj[k] = v;\r\n            }\r\n            proc.replaceMark(k);\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    /**\r\n     * Called internally by processLoop().  \r\n     * Given a String of \"$?{prop:value}$?{prop:value}\" actions to process,\r\n     * invoke setPropertyValues calls on each gameState object that might \r\n     * be receiving property changes.  \r\n     * @param {String} acts String of $p{}$n{}$l{}$x{}$i{} prop:value settings.  \r\n     * @param {GameState} gameState holding all game objects that might be processed.  \r\n     * @return {GameState} the (possibly) modified gameState obj.  \r\n     */\r\n    doActions(acts, gameState){\r\n        LoopProcessor.logIt(\"doActions called with: \"+ acts);\r\n        gameState.player   = this.setPropertyValues( acts, gameState.player  , pS);\r\n        gameState.location = this.setPropertyValues( acts, gameState.location, lS);\r\n        gameState.loop     = this.setPropertyValues( acts, gameState.loop    , xS);\r\n        return gameState;\r\n    }\r\n\r\n    /**\r\n     * called internally\r\n     * @param {String*} env String \"$c{}$r{}$m{}\" environment message markup to process.  \r\n     * @param {GameState} gameState \r\n     * @param {String} sMark String cS, rS, mS, sS for the type of messaging to seek/replace.\r\n     * @return {String} environment messaging with messages replacing markup.\r\n     */\r\n    getMessaging = async(markup, gameState, sMark) =>{\r\n        let proc = new MarkedMessage(markup, 0, sMark);\r\n        let key, val;\r\n        let npcs = [];\r\n        let location = gameState.location;\r\n        while( proc.hasMark && proc.hasKey() ){\r\n            key =  proc.key;\r\n            console.log(\"Downloading \"+ sMark +\" message for id: \"+ key);\r\n            switch(sMark){\r\n                case cS:\r\n                    await ChainedMessageMap.getChainedMessage(key, gameState, false)\r\n                    .then(res => { val = res.message; } );\r\n                    break;\r\n                case rS:\r\n                    await RandomMessageMap.getRandomMessage(key, gameState)\r\n                    .then(res => { val = res.message; } );\r\n                    break;\r\n                case mS:\r\n                    await MessageMap.getMessage(key, gameState)\r\n                    .then(res => { val = res.message; } );\r\n                    break;\r\n                case sS:\r\n                    await SynonymMap.getSynonym(key)\r\n                    .then(res => { val = res.synonym; } );\r\n                    break;\r\n                case lstS:\r\n                    val = \"\";\r\n                    if(key === \"npc\"){\r\n                        npcs = location.getNPCs(location.zone);\r\n                        if(npcs.length > 0){\r\n                            // eslint-disable-next-line no-loop-func\r\n                            npcs.forEach(n => {\r\n                                val += n.display +\", \";\r\n                            });\r\n                            val = val.slice(0,-2);\r\n                        }\r\n                    }\r\n                    break;\r\n                default:\r\n                    val = \" <unknown.message> \";\r\n            }\r\n            //LoopProcessor.logIt(\"Retrieved \"+ sMark +\" message: \"+ val);\r\n            proc.replaceMark(val);\r\n        }\r\n        return proc.message;\r\n    }\r\n\r\n    /**\r\n     * Called internally by processLoop().  \r\n     * Given a String of \"$c{}$r{}$m{}\" environment messaging to process,\r\n     * invoke appropriate MessageMap, RandomMessageMap, and ChainedMessageMap \r\n     * libraries to satisfy the environment messaging.   \r\n     * @param {String} env String of \"$c}$r}$m}\" environment messaging.  \r\n     * @param {GameState} gameState holding all game objects that might be processed.  \r\n     * @return {GameState} the (possibly) modified gameState obj.  \r\n     */\r\n    doEnvironment = async(env, gameState) => {\r\n        LoopProcessor.logIt(\"doEnvironment called with: \"+ env);\r\n        let chained = await this.getMessaging(env, gameState, cS);\r\n        let random = await this.getMessaging( chained, gameState, rS);\r\n        let message = await this.getMessaging(random, gameState, mS);\r\n        let synonyms = await this.getMessaging(message, gameState, sS);\r\n        return synonyms;\r\n    }\r\n\r\n    /**\r\n     * Called internally by processLoop().  \r\n     * Given a String of \"$c{}$r{}$m{}\" input messaging to process,\r\n     * invoke appropriate MessageMap, RandomMessageMap, and ChainedMessageMap \r\n     * libraries to satisfy the input messaging.   \r\n     * @param {String} ins String of \"$c}$r}$m}\" input messaging.  \r\n     * @param {GameState} gameState holding all game objects that might be processed.  \r\n     * @return {GameState} the (possibly) modified gameState obj.  \r\n     */\r\n    doInput = async(ins, gameState) => {\r\n        LoopProcessor.logIt(\"doInput called with: \"+ ins);\r\n        let chained = await this.getMessaging(ins, gameState, cS);\r\n        let random = await this.getMessaging( chained, gameState, rS);\r\n        let message = await this.getMessaging( random, gameState, mS);\r\n        let synonyms = await this.getMessaging(message, gameState, sS);\r\n        let list = await this.getMessaging(synonyms, gameState, lstS);\r\n        return list;\r\n    }\r\n\r\n    /**\r\n     * Called internally by processLoop().  \r\n     * Given a String of \"$c{}$r{}$m{}\" output messaging to process,\r\n     * invoke appropriate MessageMap, RandomMessageMap, and ChainedMessageMap \r\n     * libraries to satisfy the output messaging.   \r\n     * @param {String} outs String of \"$c}$r}$m}\" output messaging.  \r\n     * @param {GameState} gameState holding all game objects that might be processed.  \r\n     * @return {GameState} the (possibly) modified gameState obj.  \r\n     */\r\n    doOutput = async(outs, gameState) => {\r\n        LoopProcessor.logIt(\"doOutput called with: \"+ outs);\r\n        // array of: messaging:trigger:actions | messaging:trigger:actions | messaging:trigger:actions\r\n        // $c{}$r{}$m{}:trigger:$}$}$} | $c{}$r{}$m{}:trigger:$}$}$} | $c{}$r{}$m{}:trigger:$}$}$}\r\n        let arr = outs.split(\"|\"); // new array items: $c{}$r{}$m{}:trigger:$}$}$}\r\n        let outArr = [];\r\n        for(let i=0; i< arr.length; i++){\r\n            let msg=\"\"; let trig=\"\"; let acts=\"\";\r\n            let cin = arr[i].indexOf(\":\");\r\n            let mArr = (cin > 0) ? arr[i].substring(0, cin) \r\n                       : ((cin === 0) ? \"\" : arr[i]);\r\n            if(mArr != null && mArr.length > 0){\r\n                let chained = await this.getMessaging(mArr, gameState, cS);\r\n                let random = await this.getMessaging(chained, gameState, rS);\r\n                let message = await this.getMessaging(random, gameState, mS);\r\n                let synonyms = await this.getMessaging(message, gameState, sS);\r\n                msg = synonyms;\r\n            }\r\n            let cend = (cin > -1) ? arr[i].indexOf(\":\", cin +1) : -1;\r\n            if( cend > cin){\r\n                trig = ( cend > cin+1 ) ? arr[i].substring(cin +1, cend): \"\";\r\n                acts = (cend < arr[i].length) ? arr[i].substring(cend+1) : \"\";\r\n            }else if( cin > -1){\r\n                trig = arr[i].substring(cin +1);\r\n                acts = \"\";\r\n            }\r\n            outArr.push(new OutTriggerActions({message: msg, trigger: trig, actions: acts}));\r\n        }\r\n        return outArr; // array of OutTriggerActions\r\n    }\r\n\r\n    /**\r\n     * Called internally by checkPass().  \r\n     * Given a String of \"$?{prop:value}$?{prop:value}\" settings, \r\n     * check all obj property values for the sMark given to \r\n     * see if they obj values match the checks values.  \r\n     * Suports prop:value, prop:!value, prop:>value, prop:<value\r\n     * @param {String} checks String of $p{}$n{}$l{}$x{}$i{} prop:value checks.  \r\n     * @param {*} obj  the p, n, l, x, i obj to check for property values.  \r\n     * @param {String} sMark String prefix pS, nS, lS, xS, iS to identify the props to check.  \r\n     * @return {boolean} true if ALL checked obj values match expected values.  \r\n     */\r\n    checkPropertyValues(checks, obj, sMark){\r\n        //LoopProcessor.logIt(\"checkPropertyValues called with \"+ sMark +\": \"+ checks);\r\n        let proc = new MarkedMessage(checks, 0, sMark);\r\n        let a, arr, k, v, t;\r\n        while( proc.hasMark && proc.hasKey() ){\r\n            a =  proc.key;\r\n            arr = a.split(':');\r\n            k = arr[0]; v=arr[1];\r\n            t = obj[k];\r\n            // check for property should not exist\r\n            if ( v === '!' ) {\r\n                if (t != null) return false;\r\n            }\r\n            // check for (property:!value)(property:>value)(property:<value)\r\n            else if ( (v.indexOf('!')) === 0 ) {\r\n                v = v.slice(1);\r\n                // FAIL/FALSE if they ARE equal\r\n                // Note the property MISSING is the same as NOT EQUAL\r\n                // eslint-disable-next-line eqeqeq\r\n                if( (t != null ) && (v == t) ) return false;\r\n            }\r\n            else if ( (v.indexOf('>')) === 0 ) {\r\n                v = v.slice(1);\r\n                // property cannot be MISSING and should be numeric\r\n                if(t == null ) return false;\r\n                t = Number(t);\r\n                v = Number(v);\r\n                if( isNaN(t) || isNaN(v) || ( t <= v) ) return false;    // the value is NOT greater than\r\n            }\r\n            else if ( (v.indexOf('<')) === 0 ) {\r\n                v = v.slice(1);\r\n                // property cannot be MISSING and should be numeric\r\n                if(t == null ) return false;\r\n                t = Number(t);\r\n                v = Number(v);\r\n                if( isNaN(t) || isNaN(v) || (t >= v) ) return false;    // the value is NOT less than\r\n            }\r\n            else{\r\n                // Insure EXISTING and EQUAL, or fail if they are not\r\n                // eslint-disable-next-line eqeqeq\r\n                if(! ((t != null ) && (v == t)) ) {\r\n                    //LoopProcessor.logIt(t +\" \"+ (typeof t) +\" did not equal \"+ v +\" \"+ (typeof v));\r\n                    return false; // exit on first failed check\r\n                }\r\n            }\r\n            proc.replaceMark(k);\r\n        }\r\n        //LoopProcessor.logIt(t +\" did satisfy \"+ v);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Called internally by processLoop().  \r\n     * Given a String of \"$?{prop:value}$?{prop:value}\" checks to process,\r\n     * invoke checkPropertyValues calls on each gameState object that might \r\n     * have values to check.  \r\n     * @param {String} checks String of $p{}$n{}$l{}$x{}$i{} prop:value settings.  \r\n     * @param {GameState} gameState .  \r\n     * @return {boolean} true if ALL checked obj values match expected values.  \r\n     */\r\n    checksPass(checks, gameState){\r\n        //LoopProcessor.logIt(\"checkPass called with: \"+ checks);\r\n        if( (this.checkPropertyValues( checks, gameState.player  , pS) ) &&\r\n            (this.checkPropertyValues( checks, gameState.location, lS) ) &&\r\n            (this.checkPropertyValues( checks, gameState.loop    , xS) ) ) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Main application/game logic loop.  Called from the external App layer.  \r\n     * Using the provided gameState, process the LoopProcessor logic table for \r\n     * the set of checks to perform and the resulting actions to take.  \r\n     * Calls checkPass(), doActions(), doEnvironment(), doInputs() and doOutputs().  \r\n     * @param {GameState} gameState .  \r\n     * @return {GameState} the (probably) modified gameState obj.  \r\n     */\r\n    processLoop(gameState, caller ){\r\n        this.caller = caller;\r\n        LoopProcessor.logIt(\"beginning loop of \"+ this.logic.length + \" rows.\");\r\n        // loop through the logic table looking for the first \"match\" on a row \r\n        let location = gameState.location;  // LocationInfo\r\n        let loop     = gameState.loop;      // LoopInfo\r\n        //let player   = gameState.player;    // AgentInfo\r\n        let npc      = location.npc ?? \"\";\r\n        if (npc.length > 0 && npc === \"none\") { \r\n            npc = \"\"; \r\n        }\r\n        let row = null;\r\n        gameState.row        = null;\r\n        gameState.envtext    = \"\";\r\n\r\n        this.lastRow = gameState.lastRow ?? 0;\r\n\r\n        let i = 0;\r\n        for( i=0 ; i < this.logic.length ; i++){\r\n            row = this.logic[i];\r\n            //LoopProcessor.logIt(\"checking row: \"+ i);\r\n            if( ( row.w.length  > 0   && row.w === location.world ) &&   // world must have a value\r\n                ( row.z.length  > 0   && row.z === location.zone  ) &&   // zone  must have a value\r\n                ( (row.n.length > 0   && row.n === npc            ) ||   // npc   might have a value\r\n                  (row.n.length === 0 && npc.length === 0       ) ) &&   // if npc then get npc AgentInfo from storage array (future)\r\n                ( row.t.length  > 0   && row.t === loop.trigger   ) &&\r\n                ( row.c.length === 0  || this.checksPass(row.c, gameState)) ){\r\n                // if we made it here the row is a match\r\n                break;\r\n            }\r\n        }\r\n        //===========================================================================\r\n        // row will be the matched row, or the last row--which is used for no matches\r\n        //===========================================================================\r\n        LoopProcessor.logIt(\"matched on row: \"+ i);\r\n        gameState.row = row; // for testing only\r\n        gameState.lastRow = i;\r\n\r\n        if(row.a.length > 0) { gameState = this.doActions ( row.a, gameState ); }\r\n\r\n        this.endGameState = gameState;\r\n\r\n        // handle async calls\r\n        this.envLoading = this.insLoading = this.outLoading = false;\r\n        this.envDoneLoading = this.insDoneLoading = this.outDoneLoading = true;\r\n\r\n        // need loadWatcher to work asynchronous...\r\n        this.loadTimer = setInterval(this.loadWatcher, 250);\r\n    }\r\n\r\n    // might not need this watcher anymore if we put back into routine above.\r\n    loadWatcher = async() => {\r\n        LoopProcessor.logIt(\"commencing dynamic message processing and loading...\");\r\n        if( this.endGameState.row.e.length > 0 && this.envLoading === false ) {\r\n            this.envLoading = true;\r\n            this.envDoneLoading = false;\r\n            let msg = null;\r\n            await this.doEnvironment( this.endGameState.row.e, this.endGameState )\r\n            .then(res => { msg = res;});\r\n            LoopProcessor.logIt(\"doEnvironment response: \\n\"+ msg);\r\n            this.endGameState.envtext = msg;\r\n            this.envDoneLoading = true;\r\n        }\r\n        if(this.endGameState.row.i.length > 0 && (this.endGameState.lastrow !== this.lastRow ) && this.insLoading === false) {\r\n            this.insLoading = true;\r\n            this.insDoneLoading = false;\r\n            let msg = null;\r\n            await this.doInput( this.endGameState.row.i, this.endGameState )\r\n            .then(res => {msg = res;})\r\n            LoopProcessor.logIt(\"doInput response: \"+ msg);\r\n            this.endGameState.instext = this.endGameState.instext.concat(\"\\n\", msg, \"\\n\");\r\n            this.insDoneLoading = true;\r\n        }\r\n        // doOutput will have to be modified too, when ready\r\n        if(this.endGameState.row.o.length > 0 && (this.endGameState.lastRow !== this.lastRow ) && this.outLoading === false) {\r\n            this.outLoading = true;\r\n            this.outDoneLoading = false;\r\n            let outOptions = null;\r\n            await this.doOutput( this.endGameState.row.o, this.endGameState )\r\n            .then(res =>{outOptions = res;}); //probably gonna fail? array of new OutTriggerActions objects\r\n            LoopProcessor.logIt(\"doOutput response: \"+JSON.stringify(outOptions));\r\n            this.endGameState.outOptions = outOptions;\r\n            this.outDoneLoading = true;\r\n        }\r\n\r\n        if(this.envDoneLoading ===true && this.insDoneLoading === true && this.outDoneLoading === true){\r\n            LoopProcessor.logIt(\"MessageWatcher finished. Invoking callback function...\")\r\n            clearInterval(this.loadTimer);\r\n            this.caller(this.endGameState);\r\n        }\r\n    }\r\n}\r\nexport default LoopProcessor;","import React, {Component} from \"react\";\r\nimport {hot} from \"react-hot-loader\";\r\nimport \"./App.css\";\r\n\r\nclass DialogState extends Component{\r\n\r\n    constructor(props) {\r\n      super(props);\r\n    }\r\n\r\n    render(){\r\n      console.log(\"DialogState rendering...\");\r\n      return(\r\n          <div className=\"DialogState\">\r\n              <table className=\"DialogStateTable\">\r\n              <thead className=\"DialogStateHeader\">\r\n              <tr><th>World</th><th>Zone</th><th>NPC</th><th>Trigger</th><th>NxTrigger</th><th>Delay</th><th>RESET</th></tr>\r\n              </thead>\r\n              <tbody className=\"DialogStateContent\">\r\n              <tr><td>{this.props.gameState.location.world}</td><td>{this.props.gameState.location.zone}</td><td>{this.props.gameState.location.npc}</td>\r\n                  <td>{this.props.gameState.loop.trigger}</td><td>{this.props.gameState.loop.nxtrigger}</td><td>{this.props.gameState.loop.delay}</td>\r\n                  <td><button type=\"button\" value=\"Reset Game\" onClick={(evt) => {this.props.gameState.resetHandler(evt)}}>Reset Game</button></td>\r\n              </tr>\r\n              </tbody>\r\n              </table>\r\n          </div>\r\n      );\r\n    }\r\n  }\r\n\r\nexport default DialogState;","import React, {Component} from \"react\";\r\nimport \"./App.css\";\r\n\r\nclass LocationSelector extends Component{\r\n    \r\n    constructor(props){\r\n      super(props);\r\n      this.composeOptions =this.composeOptions.bind(this);\r\n    }\r\n\r\n    composeOptions(zoneId){\r\n        let zs = [];\r\n        zs.push({id:\"none\", display:\"\"});\r\n        let adjacents = this.props.gameState.location.getZone(zoneId).adjacents;\r\n        adjacents.forEach((zid, index, array ) =>{\r\n            let zone = this.props.gameState.location.getZone(zid);\r\n            if(zone != null) zs.push(zone);\r\n        });\r\n        return zs.map((item) => <option key={item.id} value={item.id}>{item.display}</option>);\r\n    }\r\n  \r\n    render(){\r\n      console.log(\"LocationSelector rendering...\");\r\n      //let worldOptions = this.composeOptions(worlds);\r\n      let zoneOptions  = this.composeOptions(this.props.gameState.location.zone); //zone = zoneId only\r\n\r\n      return(\r\n        //<section className=\"LocationSelector\">\r\n          <table className=\"LocationSelectorTable\">\r\n            <thead className=\"LocationSelectorHeader\">\r\n            <tr>\r\n            <th>Move To</th></tr>\r\n            </thead>\r\n            <tbody className=\"LocationSelectorContent\">\r\n              <tr>\r\n                <td><select value={this.props.gameState.location.zone} id=\"zone\" name=\"zone\" size=\"1\"\r\n                     onChange={(evt) => {this.props.gameState.location.locHandler(evt)}} >\r\n                     {zoneOptions}\r\n                </select></td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        //</section>\r\n      );\r\n    }\r\n  }\r\n  export default LocationSelector;","import React, {Component} from \"react\";\r\nimport \"./App.css\";\r\n\r\nclass NPCSelector extends Component{\r\n\r\n    constructor(props){\r\n      super(props);\r\n      this.composeOptions = this.composeOptions.bind(this);\r\n    }\r\n\r\n    composeOptions(zoneId){\r\n        let ns = [{id:\"none\", display:\"\"}];\r\n        let ns2 = this.props.gameState.location.getZone(zoneId).npcs;\r\n        let npcs = ns.concat(ns2);\r\n        return npcs.map((item) => <option key={item.id} value={item.id}>{item.display}</option>);\r\n    }\r\n  \r\n    render(){\r\n      console.log(\"NPCSelector rendering...\");\r\n      let npcOptions = this.composeOptions(this.props.gameState.location.zone); //zone = zoneId only\r\n      return(\r\n        //<section className=\"NPCSelector\">\r\n          <table className=\"NPCSelectorTable\">\r\n            <thead className=\"NPCSelectorHeader\">\r\n            <tr><th>Talk To</th></tr>\r\n            </thead>\r\n            <tbody className=\"NPCSelectorContent\">\r\n            <tr>\r\n              <td><select value={this.props.gameState.location.npc} id=\"npc\" name=\"npc\" size=\"1\"\r\n                    onChange={(evt) => {this.props.gameState.location.npcHandler(evt)}} >\r\n                    {npcOptions}\r\n              </select></td>\r\n            </tr>\r\n            </tbody>\r\n          </table>\r\n        //</section>\r\n      );\r\n    }\r\n  }\r\n\r\nexport default NPCSelector;","import https_fetch from \"./https_fetch\";\r\n\r\nvar options = new Map();\r\n\r\nclass AgentInfo {\r\n\r\n    constructor(props){\r\n        this.uid         = props.uid          ?? Date.now();\r\n        this.firstName   = props.firstName    ?? \"Test\";\r\n        this.lastName    = props.lastName     ?? \"Player\";\r\n        this.age         = props.age          ?? 18;\r\n        this.gender      = props.gender       ?? \"male\";      // male, female\r\n        this.race        = props.race         ?? \"american\";  // american, british, russian\r\n        this.skin        = props.skin         ?? \"white\";     // white, brown, yellow\r\n        this.eyes        = props.eyes         ?? \"brown\";     // blue, brown, green\r\n        this.hair        = props.hair         ?? \"blond\";     // black, blond, red\r\n        this.cloth       = props.cloth        ?? \"grey\";      // black, white, grey\r\n        this.height      = props.height       ?? 0;           // 0=sm, 1=med, 2=lg\r\n        this.weight      = props.weight       ?? 0;           // 0=sm, 1=med, 2=lg\r\n        this.cleanliness = props.cleanliness  ?? 0;           // 0=sm, 1=med, 2=lg\r\n        this.beauty      = props.beauty       ?? 0;           // 0=sm, 1=med, 2=lg\r\n        this.strength    = props.strength     ?? 0;           // 0=sm, 1=med, 2=lg\r\n        this.handler     = props.agentHandler ?? \"\";\r\n\r\n        this.isLoaded   = this.isLoaded.bind(this);\r\n        this.loadGame   = this.loadGame.bind(this);\r\n        this.setHandlers = this.setHandlers.bind(this);\r\n\r\n        if(options.size === 0) this.loadGame();\r\n    }\r\n\r\n    static logIt( msg ) { /* console.log( \"AgentInfo: \"+ msg ); */ }\r\n\r\n    setHandlers(props){\r\n        this.handler = props.agentHandler;\r\n    }\r\n\r\n    isLoaded(){\r\n        return options.size > 0;\r\n    }\r\n\r\n    loadGame = async() => {\r\n        await https_fetch.getApplicationJson(\"/agent/options\")\r\n        .then( res => {\r\n            AgentInfo.logIt(\"async loading complete...\");\r\n            options = new Map(Object.entries(res));\r\n        })\r\n        .catch(err => {\r\n            AgentInfo.logIt(\"async loading returned with error...\");\r\n            throw new Error(err.message);\r\n        });\r\n    }\r\n\r\n    static getAllOptions(){\r\n        return options;\r\n    }\r\n\r\n    static getOptionsFor(key){\r\n        AgentInfo.logIt(\"getting options for KEY: \"+ key);\r\n        if(options.has(key.toLowerCase())){\r\n            return options.get(key.toLowerCase());\r\n        }\r\n        AgentInfo.logIt(\"returning EMPTY options for KEY: \"+ key);\r\n        return {};\r\n    }\r\n}\r\nexport default AgentInfo;\r\n","import React, {Component} from \"react\";\r\nimport \"./App.css\";\r\n// eslint-disable-next-line no-unused-vars\r\nimport AgentInfo from \"./AgentInfo\";\r\n\r\nlet raceOptions     = [];\r\nlet genderOptions   = [];\r\nlet skinOptions     = [];\r\nlet eyeOptions      = [];\r\nlet hairOptions     = [];\r\nlet clothOptions    = [];\r\nlet heightOptions   = [];\r\nlet weightOptions   = [];\r\nlet cleanOptions    = [];\r\nlet beautyOptions   = [];\r\nlet strengthOptions = [];\r\n\r\nclass PlayerEditor extends Component{\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.composeOptions =this.composeOptions.bind(this);\r\n  }\r\n\r\n  composeOptions(mapItems){\r\n    return Array.from(mapItems).map((item) => <option key={item.id} value={item.id}>{item.text}</option>);\r\n  }\r\n\r\n  static logIt( msg ){ /*console.log( \"PlayerEditor: \"+ msg ); */ }\r\n\r\n  render(){\r\n    PlayerEditor.logIt( \"rendering player options...\");\r\n    if (raceOptions.length == 0){\r\n      raceOptions     = this.composeOptions(AgentInfo.getOptionsFor(\"race\"));\r\n      genderOptions   = this.composeOptions(AgentInfo.getOptionsFor(\"gender\"));\r\n      skinOptions     = this.composeOptions(AgentInfo.getOptionsFor(\"skin\"));\r\n      eyeOptions      = this.composeOptions(AgentInfo.getOptionsFor(\"eye\"));\r\n      hairOptions     = this.composeOptions(AgentInfo.getOptionsFor(\"hair\"));\r\n      clothOptions    = this.composeOptions(AgentInfo.getOptionsFor(\"cloth\"));\r\n      heightOptions   = this.composeOptions(AgentInfo.getOptionsFor(\"height\"));\r\n      weightOptions   = this.composeOptions(AgentInfo.getOptionsFor(\"weight\"));\r\n      cleanOptions    = this.composeOptions(AgentInfo.getOptionsFor(\"clean\"));\r\n      beautyOptions   = this.composeOptions(AgentInfo.getOptionsFor(\"beauty\"));\r\n      strengthOptions = this.composeOptions(AgentInfo.getOptionsFor(\"strength\"));\r\n    }\r\n\r\n    return(\r\n      <table className=\"PlayerProfileTable\">\r\n          <thead className=\"PlayerProfileHeader\">\r\n              <tr><th colSpan=\"2\">Player Profile</th></tr>\r\n          </thead>\r\n          <tbody className=\"PlayerProfileContent\">\r\n          <tr><td><label htmlFor=\"uid\">UID: </label></td>\r\n          <td><input type=\"number\" id=\"uid\" name=\"uid\" placeholder=\"Integer\" size=\"20\" \r\n                     min=\"0\" step=\"1\" value={this.props.gameState.player.uid} \r\n                     onChange={(evt) => {this.props.gameState.player.handler(evt)}}  /></td></tr>\r\n          <tr><td><label htmlFor=\"firstName\">First Name: </label></td>\r\n          <td><input type=\"text\" id=\"firstName\" name=\"firstName\" placeholder=\"First Name\" size=\"20\" \r\n                     autoComplete=\"off\" value={this.props.gameState.player.firstName} \r\n                     onChange={(evt) => {this.props.gameState.player.handler(evt)}} /></td></tr>\r\n          <tr><td><label htmlFor=\"lastName\">Last Name: </label></td>\r\n          <td><input type=\"text\" id=\"lastName\" name=\"lastName\" placeholder=\"Last Name\" size=\"20\" \r\n                     autoComplete=\"off\" value={this.props.gameState.player.lastName} \r\n                     onChange={(evt) => {this.props.gameState.player.handler(evt)}} /></td></tr>\r\n          <tr><td><label htmlFor=\"age\">Age: </label></td>\r\n          <td><input type=\"number\" id=\"age\" name=\"age\" placeholder=\"Integer\" size=\"3\" \r\n                     min=\"18\" max=\"99\" step=\"1\" value={this.props.gameState.player.age} \r\n                     onChange={(evt) => {this.props.gameState.player.handler(evt)}} /></td></tr>\r\n          <tr><td><label htmlFor=\"gender\">Gender: </label></td>\r\n          <td><select value={this.props.gameState.player.gender} id=\"gender\" name=\"gender\" size=\"1\" \r\n                      onChange={(evt) => {this.props.gameState.player.handler(evt)}} >\r\n                {genderOptions}\r\n          </select></td></tr>\r\n          <tr><td><label htmlFor=\"race\">Race: </label></td>\r\n          <td><select value={this.props.gameState.player.race} id=\"race\" name=\"race\" size=\"1\" \r\n                      onChange={(evt) => {this.props.gameState.player.handler(evt)}} >\r\n                {raceOptions}\r\n          </select></td></tr>\r\n          <tr><td><label htmlFor=\"skin\">Skin: </label></td>\r\n          <td><select value={this.props.gameState.player.skin} id=\"skin\" name=\"skin\" size=\"1\" \r\n                      onChange={(evt) => {this.props.gameState.player.handler(evt)}} >\r\n                {skinOptions}\r\n          </select></td></tr>\r\n          <tr><td><label htmlFor=\"eyes\">Eyes: </label></td>\r\n          <td><select value={this.props.gameState.player.eyes} id=\"eyes\" name=\"eyes\" size=\"1\" \r\n                      onChange={(evt) => {this.props.gameState.player.handler(evt)}} >\r\n                {eyeOptions}\r\n          </select></td></tr>\r\n          <tr><td><label htmlFor=\"hair\">Hair: </label></td>\r\n          <td><select value={this.props.gameState.player.hair} id=\"hair\" name=\"hair\" size=\"1\" \r\n                      onChange={(evt) => {this.props.gameState.player.handler(evt)}} >\r\n                {hairOptions}\r\n          </select></td></tr>\r\n          <tr><td><label htmlFor=\"cloth\">Cloth: </label></td>\r\n          <td><select value={this.props.gameState.player.cloth} id=\"cloth\" name=\"cloth\" size=\"1\" \r\n                      onChange={(evt) => {this.props.gameState.player.handler(evt)}} >\r\n                {clothOptions}\r\n          </select></td></tr>\r\n          <tr><td><label htmlFor=\"height\">Height: </label></td>\r\n          <td><select value={this.props.gameState.player.height} id=\"height\" name=\"height\" size=\"1\" \r\n                      onChange={(evt) => {this.props.gameState.player.handler(evt)}} >\r\n                {heightOptions}\r\n          </select></td></tr>\r\n          <tr><td><label htmlFor=\"weight\">Weight: </label></td>\r\n          <td><select value={this.props.gameState.player.weight} id=\"weight\" name=\"weight\" size=\"1\" \r\n                      onChange={(evt) => {this.props.gameState.player.handler(evt)}} >\r\n                {weightOptions}\r\n          </select></td></tr>\r\n          <tr><td><label htmlFor=\"cleanliness\">Cleanliness: </label></td>\r\n          <td><select value={this.props.gameState.player.cleanliness} id=\"cleanliness\" name=\"cleanliness\" size=\"1\" \r\n                      onChange={(evt) => {this.props.gameState.player.handler(evt)}} >\r\n                {cleanOptions}\r\n          </select></td></tr>\r\n          <tr><td><label htmlFor=\"beauty\">Beauty: </label></td>\r\n          <td><select value={this.props.gameState.player.beauty} id=\"beauty\" name=\"beauty\" size=\"1\" \r\n                      onChange={(evt) => {this.props.gameState.player.handler(evt)}} >\r\n                {beautyOptions}\r\n          </select></td></tr>\r\n          <tr><td><label htmlFor=\"strength\">Strength: </label></td>\r\n          <td><select value={this.props.gameState.player.strength} id=\"strength\" name=\"strength\" size=\"1\" \r\n                      onChange={(evt) => {this.props.gameState.player.handler(evt)}} >\r\n                {strengthOptions}\r\n          </select></td></tr>\r\n          </tbody>\r\n      </table>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PlayerEditor;","import React, {Component} from \"react\";\r\nimport {hot} from \"react-hot-loader\";\r\nimport \"./App.css\";\r\n\r\nimport OutTriggerActions from \"./OutTriggerActions\";\r\n\r\nclass DialogOptions extends Component{\r\n    \r\n    constructor(props){\r\n      super(props);\r\n      this.composeOptions = this.composeOptions.bind(this);\r\n    }\r\n\r\n    composeOptions(arrList){\r\n        let i=0;\r\n        // eslint-disable-next-line jsx-a11y/anchor-is-valid\r\n        return arrList.map((item) =><div key={\"option\" + i++}><a className=\"nounderline\"\r\n                                                                onClick = {(evt) => { this.props.gameState.outHandler(\r\n                                                                                      new OutTriggerActions({trigger:item.trigger,\r\n                                                                                                             actions:item.actions}))}}\r\n                                                                nofollow=\"true\" > {item.message} </a></div>);\r\n    }\r\n\r\n    render(){\r\n      console.log(\"DialogOptions rendering...\");\r\n      let linkOptions  = this.composeOptions(this.props.gameState.outOptions);\r\n      return(\r\n        <section className=\"DialogOptions\">\r\n            {linkOptions}\r\n        </section>\r\n      );\r\n    }\r\n  }\r\n  export default DialogOptions;","import React, {Component} from \"react\";\r\nimport \"./App.css\";\r\n\r\nclass AudioFlags extends Component{\r\n    \r\n    constructor(props){\r\n        super(props);\r\n        this.narrate = props.narrate ?? true;\r\n        this.environ = props.environ ?? true;\r\n        this.atmos   = props.atmos   ?? true;\r\n    }\r\n\r\n    render(){\r\n      console.log(\"AudioFlags rendering...\");\r\n      return(\r\n          <table className=\"AudioFlagsTable\">\r\n            <thead className=\"AudioFlagsHeader\">\r\n            <tr><th>Audio</th></tr>\r\n            </thead>\r\n            <tbody className=\"AudioFlagsContent\">\r\n              <tr>\r\n                <td><input type=\"checkbox\" checked={this.props.gameState.audioFlags.narrate} \r\n                                           id=\"narrate\" name=\"narrate\" \r\n                                           onChange={(evt) => {this.props.gameState.audioHandler(evt)}} >\r\n                </input><label for=\"narrate\">Narrate</label>\r\n                <audio id=\"voice_narrate\" name=\"voice_narrate\" autoPlay></audio>\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td><input type=\"checkbox\" checked={this.props.gameState.audioFlags.environ} \r\n                                           id=\"environ\" name=\"environ\" \r\n                                           onChange={(evt) => {this.props.gameState.audioHandler(evt)}} >\r\n                </input><label for=\"environ\">Environ</label>\r\n                <audio id=\"voice_environ\" name=\"voice_environ\" autoPlay></audio>\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td><input type=\"checkbox\" checked={this.props.gameState.audioFlags.atmos} \r\n                                           id=\"atmos\" name=\"atmos\" \r\n                                           onChange={(evt) => {this.props.gameState.audioHandler(evt)}} >\r\n                </input><label for=\"atmos\">Atmos</label>\r\n                <audio id=\"voice_atmos\" name=\"voice_atmos\" autoPlay></audio>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n      );\r\n    }\r\n  }    \r\n  export default AudioFlags;","import React, {Component} from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport LocationSelector   from \"./LocationSelector\";\r\nimport NPCSelector        from \"./NPCSelector\";\r\nimport PlayerEditor       from \"./PlayerEditor\";\r\nimport DialogOptions      from \"./DialogOptions\";\r\nimport AudioFlags         from \"./AudioFlags\";\r\n\r\nclass MainContent extends Component{\r\n\r\n    render(){\r\n      console.log(\"MainContent rendering...\");\r\n      let zoneInfo = this.props.gameState.location.getZone(this.props.gameState.location.zone);\r\n      let zoneName = zoneInfo.display ?? \"\";\r\n\r\n      return(\r\n          <div className=\"MainContent\">\r\n            <table className=\"MainContentTable\">\r\n              <tbody>\r\n                <tr>\r\n                  <td className=\"PlayerDialogPane\">{zoneName}<br/>\r\n                  <textarea rows=\"32\" cols=\"70\" placeholder=\"\" \r\n                            id=\"playerview\" name=\"playerview\" maxLength=\"1024\" \r\n                            value={this.props.gameState.instext} readOnly />\r\n                  </td>\r\n                  <td className=\"NPCDialogPane\">\r\n                    <DialogOptions    gameState={this.props.gameState} />\r\n                  </td>\r\n                  <td className=\"MainContentRightPane\">\r\n                    <section><table>\r\n                      <tr><td><LocationSelector gameState={this.props.gameState} /></td>\r\n                          <td rowSpan=\"2\"><AudioFlags gameState={this.props.gameState} /></td>\r\n                      </tr>\r\n                      <tr><td><NPCSelector      gameState={this.props.gameState} /></td>\r\n                      </tr>\r\n                    </table></section>\r\n                    <PlayerEditor     gameState={this.props.gameState} />\r\n                  </td>\r\n                </tr>\r\n                <tr>\r\n                  <td colSpan=\"3\" className=\"EnvDialogPane\">\r\n                  <textarea rows=\"8\" cols=\"181\" placeholder=\"Environment Text\" \r\n                            id=\"envview\" name=\"envview\" maxLength=\"1024\" \r\n                            value={this.props.gameState.envtext} readOnly />\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n      );\r\n    }\r\n  }\r\n\r\nexport default MainContent;","import https_fetch from \"./https_fetch\";\r\n\r\nclass LocationInfo {\r\n\r\n    constructor(props){\r\n        this.loaded = false;\r\n        this.worldInfo = [];\r\n        this.zoneInfo  = [];\r\n        this.world   = \"\";\r\n        this.zone    = \"\";\r\n        this.npc     = \"none\";\r\n        this.locHandler = \"\";\r\n        this.npcHandler = \"\";\r\n\r\n        this.getStartLocation = this.getStartLocation.bind(this);\r\n        this.getZone = this.getZone.bind(this);\r\n        this.getZones = this.getZones.bind(this);\r\n        this.getNPCs = this.getNPCs.bind(this);\r\n        this.setNPCs = this.setNPCs.bind(this);\r\n\r\n        this.toString = this.toString.bind(this);\r\n        this.loadGame = this.loadGame.bind(this);\r\n        this.isLoaded = this.isLoaded.bind(this);\r\n        this.setHandlers = this.setHandlers.bind(this);\r\n\r\n        this.loadGame();\r\n    }\r\n    isLoaded(){\r\n        return this.loaded;\r\n    }\r\n\r\n    loadGame = async() => {\r\n        this.loaded = false;\r\n        await https_fetch.getApplicationJson(\"/locations\")\r\n        .then( res => {\r\n            console.log(\"LocationInfo async loading complete...\");\r\n            this.worldInfo = res.worldInfo;\r\n            this.world = this.worldInfo[0].world;\r\n            this.zoneInfo = res.zoneInfo;\r\n            this.zone = this.zoneInfo[0].id;\r\n            this.loaded = true;\r\n        })\r\n        .catch(err => {\r\n            console.log(\"LocationInfo async loading returned with error...\");\r\n            throw new Error(err.message);\r\n        });\r\n    }\r\n\r\n    static logIt( msg ){ /* console.log(\"LoacationInfo: \"+ msg ); */ }\r\n\r\n    setHandlers(props){\r\n        this.locHandler = props.locHandler ?? \"\";\r\n        this.npcHandler = props.npcHandler ?? \"\";\r\n        return this;\r\n    }\r\n\r\n    toString(){\r\n        return \"World: \"+ this.world.display +\", \"+\r\n                \"Zone: \" + this.zone.display  +\", \"+\r\n                \"NPC: \"  + this.npc;\r\n    }\r\n\r\n    /**\r\n     * @return the starting zoneInfo zone object. normally zoneInfo[0]\r\n     */\r\n    getStartLocation() {\r\n        return this.zoneInfo[0];\r\n    }\r\n\r\n    /**\r\n     * Return the zoneInfo.zone matching the zone name provided.\r\n     * @param {String} name -- the zoneInfo.zone to find\r\n     * @return the matching zoneInfo object, or null.\r\n     */\r\n    getZone(id){\r\n        LocationInfo.logIt(\"getZone for: \"+ id);\r\n        let match =  null;\r\n        this.zoneInfo.forEach((z, i, arr)=>{\r\n            if(z.id === id) {\r\n                match = z;\r\n            }\r\n        })\r\n        LocationInfo.logIt(\"getZone match = \"+ match.id);\r\n        return match;\r\n    }\r\n\r\n    /**\r\n     * Return all the zone ids for this world/game\r\n     * @return the array of zone ids in the world/game.\r\n     */\r\n    getZones(){\r\n        LocationInfo.logIt(\"getZones...\");\r\n        return this.world.zones;\r\n    }\r\n\r\n    /**\r\n     * Return the npcs array for the zone id provided.\r\n     * @param {String} name -- the zoneInfo.zone id to find.\r\n     * @return the matching zoneInfo.npcs array, or an empty array.\r\n     */\r\n    getNPCs(zid){\r\n        LocationInfo.logIt(\"getNPCs for: \"+ zid);\r\n        let match =  [];\r\n        this.zoneInfo.forEach((z, i, arr)=>{\r\n            if(z.id === zid) {\r\n                match = z.npcs;\r\n            }\r\n        })\r\n        return match;\r\n    }\r\n\r\n    /**\r\n     * Return the npcs array for the zone id provided.\r\n     * @param {String} name -- the zoneInfo.zone id to find.\r\n     * @return the matching zoneInfo.npcs array, or an empty array.\r\n     */\r\n    setNPCs(zid, npcs){\r\n        LocationInfo.logIt(\"setNPCs for: \"+ zid);\r\n        this.zoneInfo.forEach((z, i, arr)=>{\r\n            if(z.id === zid) {\r\n                z.npcs = npcs;\r\n            }\r\n        })\r\n    }\r\n}\r\nexport default LocationInfo;\r\n","\r\nclass LoopInfo {\r\n\r\n    constructor(props){\r\n        this.trigger   = props.trigger   ?? \"\";\r\n        this.nxtrigger = props.nxtrigger ?? \"\";\r\n        this.delay     = props.delay     ?? 2;\r\n    }\r\n    static getStartLoop(){\r\n        return new LoopInfo({trigger: \"start\", nxtrigger: \"\", delay: 2 });\r\n    }\r\n}\r\nexport default LoopInfo;\r\n","import LocationInfo      from \"./LocationInfo\"\r\nimport LoopInfo          from \"./LoopInfo\";\r\nimport AgentInfo         from \"./AgentInfo\";\r\nimport OutTriggerActions from \"./OutTriggerActions\";\r\nimport AudioFlags        from \"./AudioFlags\";\r\n\r\nclass GameState {\r\n\r\n    constructor(props){\r\n        this.location     = props.location     ?? new LocationInfo(props);\r\n        this.loop         = props.loop         ?? LoopInfo.getStartLoop();\r\n        this.player       = props.player       ?? AgentInfo.getTestPlayer();\r\n        this.audioFlags   = props.audioFlags   ?? new AudioFlags({narrate:true,environ:true,atmos:true});\r\n        this.envtext      = props.envtext      ?? \"\";\r\n        this.instext      = props.instext      ?? \"\";\r\n        this.outOptions   = props.outOptions   ?? [new OutTriggerActions({message:\"I got nothin.\"})];\r\n        this.envHandler   = props.envHandler;\r\n        this.insHandler   = props.insHandler;\r\n        this.outHandler   = props.outHandler;\r\n        this.resetHandler = props.resetHandler;\r\n        this.audioHandler = props.audioHandler;\r\n    }\r\n}\r\nexport default GameState;\r\n","import https_fetch from \"./https_fetch\";\r\n\r\nclass BusinessMurder {\r\n    constructor(){\r\n      this.name = \"Business of Murder\";\r\n      this.logic = [];\r\n      this.loaded = false;\r\n      this.loadGame = this.loadGame.bind(this);\r\n      this.isLoaded = this.isLoaded.bind(this);\r\n      this.getLogic = this.getLogic.bind(this);\r\n      this.getName = this.getName.bind(this);\r\n\r\n      this.loadGame();\r\n    }\r\n\r\n    isLoaded(){\r\n      return this.loaded;\r\n    }\r\n    getLogic(){\r\n      return this.logic;\r\n    }\r\n    getName(){\r\n      return this.name;\r\n    }\r\n\r\n    loadGame = async() => {\r\n      this.loaded = false;\r\n      await https_fetch.getApplicationJson(\"/logic\")\r\n      .then( res => {\r\n          console.log(\"BusinessMurder async loading complete...\");\r\n          this.logic = res.logic;\r\n          this.loaded = true;\r\n      })\r\n      .catch(err => {\r\n          console.log(\"BusinessMurder async loading returned with error...\");\r\n          throw new Error(err.message);\r\n      });\r\n    }\r\n}\r\nexport default BusinessMurder;\r\n","import React, {Component} from \"react\";\r\nimport \"./App.css\";\r\nimport LoopProcessor      from \"./LoopProcessor\";\r\nimport DialogState        from \"./DialogState\";\r\nimport MainContent        from \"./MainContent\";\r\nimport AgentInfo          from \"./AgentInfo\";\r\nimport LocationInfo       from \"./LocationInfo\";\r\nimport GameState          from \"./GameState\";\r\nimport BusinessMurder     from \"./BusinessMurder\";\r\nimport AudioFlags         from \"./AudioFlags\";\r\n\r\nclass App extends Component{\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.loading = true;\r\n    this.logic = new BusinessMurder({});  // make CoreLogic for reusability\r\n    this.locations = new LocationInfo({});\r\n    this.player = new AgentInfo({});\r\n    this.looper = {};\r\n    this.state = {};\r\n\r\n    this.handleLocationChange = this.handleLocationChange.bind(this);\r\n    this.handleNPCChange = this.handleNPCChange.bind(this);\r\n    this.handleProfileChange = this.handleProfileChange.bind(this);\r\n    this.handleLoopState = this.handleLoopState.bind(this);\r\n    this.finishLoop = this.finishLoop.bind(this);\r\n    this.handleOutputs = this.handleOutputs.bind(this);\r\n    this.componentSaveState = this.componentSaveState.bind(this);\r\n    this.componentClearState = this.componentClearState.bind(this);\r\n    this.handleResetGame = this.handleResetGame.bind(this);\r\n    this.componentStartGame = this.componentStartGame.bind(this);\r\n    this.handleAudio = this.handleAudio.bind(this);\r\n\r\n    this.loadWait = this.loadWait.bind(this);\r\n    this.loadTimer = setInterval( () => this.loadWait(), 200 );\r\n  }\r\n\r\n  loadWait(){\r\n      if ( this.logic.isLoaded() && this.locations.isLoaded() && this.player.isLoaded() ){\r\n          // all loaded, start the game\r\n          console.log(\"Game LOADING completed...\");\r\n          this.loading = false;\r\n          clearInterval(this.loadTimer);\r\n          this.componentStartGame();\r\n      }\r\n  }\r\n\r\n  componentStartGame(){\r\n    console.log(\"Game is now starting...\");\r\n    this.looper = new LoopProcessor({ name: this.logic.getName(), logic: this.logic.getLogic()});\r\n    this.looper.setHandlers({ outHandler: this.handleOutputs });\r\n    this.locations.setHandlers({locHandler: this.handleLocationChange, npcHandler: this.handleNPCChange });\r\n    this.player.setHandlers({ agentHandler: this.handleProfileChange });\r\n    // eslint-disable-next-line react/no-direct-mutation-state\r\n    this.setState({  //works...but gets overwritten in componentDidMount\r\n        loopProc:  this.looper,\r\n        gameState: new GameState({\r\n            instext: \"\",\r\n            envtext: \"\",\r\n            location: this.locations,\r\n            player: this.player,\r\n            audioFlags: new AudioFlags({environ:true,narrate:true,atmos:true}),\r\n            outHandler: this.handleOutputs,\r\n            resetHandler: this.handleResetGame,\r\n            audioHandler:  this.handleAudio\r\n            /* loop: new LoopInfo() defaults*/\r\n        })\r\n    });\r\n    //this.componentDidMount();\r\n    //this.forceUpdate();\r\n    this.loopTimer = setInterval( () => this.handleLoopState(), this.state.gameState.loop.delay *1000);\r\n  }\r\n\r\n  handleResetGame(evt) {\r\n      this.componentClearState();\r\n      this.componentStartGame();\r\n  }\r\n\r\n  componentClearState() {\r\n      localStorage.removeItem(\"player\");\r\n      localStorage.removeItem(\"world\");\r\n      localStorage.removeItem(\"zone\");\r\n      localStorage.removeItem(\"zones\");\r\n  }\r\n\r\n  componentSaveState() {\r\n      localStorage.setItem(\"player\", JSON.stringify(this.state.gameState.player));\r\n      localStorage.setItem(\"world\", this.state.gameState.location.world);\r\n      localStorage.setItem(\"zone\",  this.state.gameState.location.zone);\r\n      localStorage.setItem(\"zones\", JSON.stringify(this.state.gameState.location.zoneInfo));\r\n  }\r\n\r\n  // handle updates to audio controls (AudioFlags)\r\n  handleAudio(evt){\r\n    console.log(\"App.handleAudio processing event.\");\r\n    //clearInterval(this.loopTimer);\r\n    let newGameState = this.state.gameState;\r\n    let newAudioFlags = newGameState.audioFlags;\r\n    switch(evt.target.id){\r\n      case \"narrate\": newAudioFlags.narrate = evt.target.checked; break;\r\n      case \"environ\": newAudioFlags.environ = evt.target.checked; break;\r\n      case \"atmos\"  : newAudioFlags.atmos = evt.target.checked; break;\r\n      default:\r\n        console.log(\"App.handleAudio IGNORED event from target.id '\"+ evt.target.id +\"'\");\r\n      }\r\n    newGameState.audioFlags = newAudioFlags;\r\n    this.setState({gameState: newGameState});\r\n    this.forceUpdate();\r\n    //this.loopTimer = setInterval(() => this.handleLoopState(), 500);\r\n  }\r\n\r\n  // handle updates to the PlayerDialogPane\r\n  handleOutputs(option){\r\n      console.log(\"App.handleOutputs processing options.\");\r\n      //clearInterval(this.loopTimer);\r\n      let newState = this.state.gameState;\r\n      if( option.trigger != null && option.trigger.length > 0 ) newState.loop.trigger = option.trigger;\r\n      if( option.actions != null && option.actions.length > 0 ) newState = this.state.loopProc.doActions(option.actions, newState);\r\n      this.setState({gameState: newState});\r\n      this.forceUpdate();\r\n      //this.loopTimer = setInterval(() => this.handleLoopState(), 500);\r\n  }\r\n\r\n  // main app processing loop\r\n  handleLoopState(){\r\n      console.log(\"App.handleLoopState PROCESSING...\");\r\n      clearInterval(this.loopTimer);\r\n      this.state.loopProc.processLoop(this.state.gameState, this.finishLoop);\r\n  }\r\n\r\n  finishLoop(newGameState){\r\n    this.setState({gameState: newGameState});\r\n    console.log(\"App.handleLoopState FINISHED \");\r\n    this.loopTimer = setInterval( () => this.handleLoopState() , newGameState.loop.delay * 1000);\r\n}\r\n\r\n  handleLocationChange(evt) {\r\n    console.log(\"App.handleLocationChange processing event.\");\r\n    clearInterval(this.loopTimer);  //clear the timer and handle loop immediately\r\n    const evtValue = evt.target.value;\r\n    let newGameState = this.state.gameState;\r\n    let newLocation = newGameState.location;\r\n    if( evt.target.id === 'zone' ){\r\n      newLocation.zone = evtValue;\r\n    }else{\r\n      newLocation.world = evtValue;\r\n    }\r\n    newGameState.location = newLocation;\r\n    newGameState.instext = \"\";\r\n    this.setState({gameState: newGameState});\r\n    this.handleLoopState();\r\n  }\r\n\r\n  // handle changes to the NPCSelector.js Radio Buttons\r\n  handleNPCChange(evt){\r\n    console.log(\"App.handleNPCChange processing event.\");\r\n    //clearInterval(this.loopTimer);\r\n    const evtValue = evt.target.value;\r\n    let newGameState = this.state.gameState;\r\n    let newLocation = newGameState.location;\r\n    newLocation.npc = evtValue;\r\n    newGameState.location = newLocation;\r\n    this.setState({gameState: newGameState});\r\n    this.forceUpdate();\r\n    //this.loopTimer = setInterval( () => this.handleLoopState , 500);\r\n  }\r\n\r\n  // handle changes to the PlayerProfile.js\r\n  handleProfileChange(evt){\r\n    console.log(\"App.handleProfileChange processing event.\");\r\n    //clearInterval(this.loopTimer);\r\n    if( evt && this.state.gameState ){\r\n        const { name, value } = evt.target;\r\n        let newGameState = this.state.gameState;\r\n        let newPlayer = newGameState.player;\r\n        switch(name){\r\n            case \"uid\"        : newPlayer.uid = value        ; break;\r\n            case \"firstName\"  : newPlayer.firstName = value  ; break;\r\n            case \"lastName\"   : newPlayer.lastName = value   ; break;\r\n            case \"age\"        : newPlayer.age = value        ; break;\r\n            case \"gender\"     : newPlayer.gender = value     ; break;\r\n            case \"race\"       : newPlayer.race = value       ; break;\r\n            case \"skin\"       : newPlayer.skin = value       ; break;\r\n            case \"eyes\"       : newPlayer.eyes = value       ; break;\r\n            case \"hair\"       : newPlayer.hair = value       ; break;\r\n            case \"cloth\"      : newPlayer.cloth = value      ; break;\r\n            case \"height\"     : newPlayer.height = value     ; break;\r\n            case \"weight\"     : newPlayer.weight = value     ; break;\r\n            case \"cleanliness\": newPlayer.cleanliness = value; break;\r\n            case \"beauty\"     : newPlayer.beauty = value     ; break;\r\n            case \"strength\"   : newPlayer.strength = value   ; break;\r\n            default:\r\n              console.log(\"App.handleProfileChange IGNORED an unknown field name.\");\r\n        }\r\n        newGameState.player = newPlayer;\r\n        this.setState({gameState: newGameState});\r\n    }else{\r\n        console.log(\"App.handleProfileChange bypassed invalid event or gameState...\");\r\n    }\r\n    this.forceUpdate();\r\n    //this.loopTimer = setInterval( () => this.handleLoopState, 500);\r\n  }\r\n\r\n  render(){\r\n    console.log(\"App rendering...\");\r\n    if(this.loading === true){\r\n      return(\r\n        <div className=\"App\">\r\n          Loading...\r\n        </div>\r\n      );\r\n    }\r\n    return(\r\n      <div className=\"App\">\r\n        <DialogState gameState={this.state.gameState} />\r\n        <MainContent gameState={this.state.gameState} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Called AFTER UI is rendered...\r\n   * This seems to remove/overwrite \"state\" set in componentStartGame...\r\n   * loopProc is/was overwritten\r\n   */\r\n  componentDidMount(){\r\n      if(this.loading === false){\r\n          console.log(\"App.componentDidMount processing...\");\r\n          window.addEventListener('beforeunload', this.componentSaveState);\r\n          let newGameState = this.state.gameState;\r\n          let newPlayer = localStorage.getItem(\"player\");\r\n          let newZones = localStorage.getItem(\"zones\");\r\n          let newWorld = localStorage.getItem(\"world\");\r\n          let newZone  = localStorage.getItem(\"zone\");\r\n\r\n          if(newPlayer) {\r\n            newGameState.player = JSON.parse(newPlayer);\r\n          }\r\n          if(newZones)  {\r\n            newGameState.location.zoneInfo = JSON.parse(newZones);\r\n          }\r\n\r\n          if(newWorld) newGameState.location.world = newWorld;\r\n          if(newZone)  newGameState.location.zone = newZone;\r\n\r\n          this.setState({\r\n              loopProc: this.looper,\r\n              gameState: newGameState\r\n          });\r\n      }else{\r\n          console.log(\"BYPASSED App.componentDidMount processing while loading data...\");\r\n      }\r\n  }\r\n\r\n  componentWillUnmount(){\r\n      this.componentSaveState();\r\n      window.removeEventListener('beforeunload', this.componentSaveState);\r\n  }\r\n}\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App                   from \"./App\";\r\n////import AWSPollyTest          from \"./AWSPollyTest\";\r\n//import SynonymMapTest        from \"./SynonymMapTest\";\r\n//import MessageMapTest        from \"./MessageMapTest\";\r\n//import RandomMessageMapTest  from \"./RandomMessageMapTest\";\r\n//import ChainedMessageMapTest from \"./ChainedMessageMapTest\";\r\n////import LoopProcessorTest     from \"./LoopProcessorTest\";\r\n////import LocationInfoTest     from \"./LocationInfoTest\";\r\n\r\nReactDOM.render(<App props/>, document.getElementById(\"root\"));\r\n////ReactDOM.render(<AWSPollyTest props/>, document.getElementById(\"root\"));\r\n//ReactDOM.render(<SynonymMapTest props/>, document.getElementById(\"root\"));\r\n//ReactDOM.render(<MessageMapTest props/>, document.getElementById(\"root\"));\r\n//ReactDOM.render(<RandomMessageMapTest props/>, document.getElementById(\"root\"));\r\n//ReactDOM.render(<ChainedMessageMapTest props/>, document.getElementById(\"root\"));\r\n////ReactDOM.render(<LoopProcessorTest props/>, document.getElementById(\"root\"));\r\n////ReactDOM.render(<LocationInfoTest props/>, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}